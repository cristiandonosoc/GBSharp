using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GBSharp.CPUSpace.Dictionaries
{
  class CPUInstructionDescriptions
  {
    internal static Dictionary<byte, string> Setup()
    {
      return new Dictionary<byte, string>() {
            {0x00, "NOP: No Operation" },
            {0x01, "LD BC,nn: Load 16-bit immediate into BC" },
            {0x02, "LD (BC),A: Save A to address pointed by BC" },
            {0x03, "INC BC: Increment 16-bit BC" },
            {0x04, "INC B: Increment B" },
            {0x05, "DEC B: Decrement B" },
            {0x06, "LD B,n: Load 8-bit immediate into B" },
            {0x07, "RLC A: Rotate A left with carry" },
            {0x08, "LD (nn),SP: Save SP to given address" },
            {0x09, "ADD HL,BC: Add 16-bit BC to HL" },
            {0x0A, "LD A,(BC): Load A from address pointed to by BC" },
            {0x0B, "DEC BC: Decrement 16-bit BC" },
            {0x0C, "INC C: Increment C" },
            {0x0D, "DEC C: Decrement C" },
            {0x0E, "LD C,n: Load 8-bit immediate into C" },
            {0x0F, "RRC A: Rotate A right with carry" },
            {0x10, "STOP: Stop processor" },
            {0x11, "LD DE,nn: Load 16-bit immediate into DE" },
            {0x12, "LD (DE),A: Save A to address pointed by DE" },
            {0x13, "INC DE: Increment 16-bit DE" },
            {0x14, "INC D: Increment D" },
            {0x15, "DEC D: Decrement D" },
            {0x16, "LD D,n: Load 8-bit immediate into D" },
            {0x17, "RL A: Rotate A left" },
            {0x18, "JR n: Relative jump by signed immediate" },
            {0x19, "ADD HL,DE: Add 16-bit DE to HL" },
            {0x1A, "LD A,(DE): Load A from address pointed to by DE" },
            {0x1B, "DEC DE: Decrement 16-bit DE" },
            {0x1C, "INC E: Increment E" },
            {0x1D, "DEC E: Decrement E" },
            {0x1E, "LD E,n: Load 8-bit immediate into E" },
            {0x1F, "RR A: Rotate A right" },
            {0x20, "JR NZ,n: Relative jump by signed immediate if last result was not zero" },
            {0x21, "LD HL,nn: Load 16-bit immediate into HL" },
            {0x22, "LDI (HL),A: Save A to address pointed by HL, and increment HL" },
            {0x23, "INC HL: Increment 16-bit HL" },
            {0x24, "INC H: Increment H" },
            {0x25, "DEC H: Decrement H" },
            {0x26, "LD H,n: Load 8-bit immediate into H" },
            {0x27, "DAA: Adjust A for BCD addition" },
            {0x28, "JR Z,n: Relative jump by signed immediate if last result was zero" },
            {0x29, "ADD HL,HL: Add 16-bit HL to HL" },
            {0x2A, "LDI A,(HL): Load A from address pointed to by HL, and increment HL" },
            {0x2B, "DEC HL: Decrement 16-bit HL" },
            {0x2C, "INC L: Increment L" },
            {0x2D, "DEC L: Decrement L" },
            {0x2E, "LD L,n: Load 8-bit immediate into L" },
            {0x2F, "CPL: Complement (logical NOT) on A" },
            {0x30, "JR NC,n: Relative jump by signed immediate if last result caused no carry" },
            {0x31, "LD SP,nn: Load 16-bit immediate into SP" },
            {0x32, "LDD (HL),A: Save A to address pointed by HL, and decrement HL" },
            {0x33, "INC SP: Increment 16-bit HL" },
            {0x34, "INC (HL): Increment value pointed by HL" },
            {0x35, "DEC (HL): Decrement value pointed by HL" },
            {0x36, "LD (HL),n: Load 8-bit immediate into address pointed by HL" },
            {0x37, "SCF: Set carry flag" },
            {0x38, "JR C,n: Relative jump by signed immediate if last result caused carry" },
            {0x39, "ADD HL,SP: Add 16-bit SP to HL" },
            {0x3A, "LDD A,(HL): Load A from address pointed to by HL, and decrement HL" },
            {0x3B, "DEC SP: Decrement 16-bit SP" },
            {0x3C, "INC A: Increment A" },
            {0x3D, "DEC A: Decrement A" },
            {0x3E, "LD A,n: Load 8-bit immediate into A" },
            {0x3F, "CCF: Complement Carry Flag" },
            {0x40, "LD B,B: Copy B to B" },
            {0x41, "LD B,C: Copy C to B" },
            {0x42, "LD B,D: Copy D to B" },
            {0x43, "LD B,E: Copy E to B" },
            {0x44, "LD B,H: Copy H to B" },
            {0x45, "LD B,L: Copy L to B" },
            {0x46, "LD B,(HL): Copy value pointed by HL to B" },
            {0x47, "LD B,A: Copy A to B" },
            {0x48, "LD C,B: Copy B to C" },
            {0x49, "LD C,C: Copy C to C" },
            {0x4A, "LD C,D: Copy D to C" },
            {0x4B, "LD C,E: Copy E to C" },
            {0x4C, "LD C,H: Copy H to C" },
            {0x4D, "LD C,L: Copy L to C" },
            {0x4E, "LD C,(HL): Copy value pointed by HL to C" },
            {0x4F, "LD C,A: Copy A to C" },
            {0x50, "LD D,B: Copy B to D" },
            {0x51, "LD D,C: Copy C to D" },
            {0x52, "LD D,D: Copy D to D" },
            {0x53, "LD D,E: Copy E to D" },
            {0x54, "LD D,H: Copy H to D" },
            {0x55, "LD D,L: Copy L to D" },
            {0x56, "LD D,(HL): Copy value pointed by HL to D" },
            {0x57, "LD D,A: Copy A to D" },
            {0x58, "LD E,B: Copy B to E" },
            {0x59, "LD E,C: Copy C to E" },
            {0x5A, "LD E,D: Copy D to E" },
            {0x5B, "LD E,E: Copy E to E" },
            {0x5C, "LD E,H: Copy H to E" },
            {0x5D, "LD E,L: Copy L to E" },
            {0x5E, "LD E,(HL): Copy value pointed by HL to E" },
            {0x5F, "LD E,A: Copy A to E" },
            {0x60, "LD H,B: Copy B to H" },
            {0x61, "LD H,C: Copy C to H" },
            {0x62, "LD H,D: Copy D to H" },
            {0x63, "LD H,E: Copy E to H" },
            {0x64, "LD H,H: Copy H to H" },
            {0x65, "LD H,L: Copy L to H" },
            {0x66, "LD H,(HL): Copy value pointed by HL to H" },
            {0x67, "LD H,A: Copy A to H" },
            {0x68, "LD L,B: Copy B to L" },
            {0x69, "LD L,C: Copy C to L" },
            {0x6A, "LD L,D: Copy D to L" },
            {0x6B, "LD L,E: Copy E to L" },
            {0x6C, "LD L,H: Copy H to L" },
            {0x6D, "LD L,L: Copy L to L" },
            {0x6E, "LD L,(HL): Copy value pointed by HL to L" },
            {0x6F, "LD L,A: Copy A to L" },
            {0x70, "LD (HL),B: Copy B to address pointed by HL" },
            {0x71, "LD (HL),C: Copy C to address pointed by HL" },
            {0x72, "LD (HL),D: Copy D to address pointed by HL" },
            {0x73, "LD (HL),E: Copy E to address pointed by HL" },
            {0x74, "LD (HL),H: Copy H to address pointed by HL" },
            {0x75, "LD (HL),L: Copy L to address pointed by HL" },
            {0x76, "HALT: Halt processor" },
            {0x77, "LD (HL),A: Copy A to address pointed by HL" },
            {0x78, "LD A,B: Copy B to A" },
            {0x79, "LD A,C: Copy C to A" },
            {0x7A, "LD A,D: Copy D to A" },
            {0x7B, "LD A,E: Copy E to A" },
            {0x7C, "LD A,H: Copy H to A" },
            {0x7D, "LD A,L: Copy L to A" },
            {0x7E, "LD A,(HL): Copy value pointed by HL to A" },
            {0x7F, "LD A,A: Copy A to A" },
            {0x80, "ADD A,B: Add B to A" },
            {0x81, "ADD A,C: Add C to A" },
            {0x82, "ADD A,D: Add D to A" },
            {0x83, "ADD A,E: Add E to A" },
            {0x84, "ADD A,H: Add H to A" },
            {0x85, "ADD A,L: Add L to A" },
            {0x86, "ADD A,(HL): Add value pointed by HL to A" },
            {0x87, "ADD A,A: Add A to A" },
            {0x88, "ADC A,B: Add B and carry flag to A" },
            {0x89, "ADC A,C: Add C and carry flag to A" },
            {0x8A, "ADC A,D: Add D and carry flag to A" },
            {0x8B, "ADC A,E: Add E and carry flag to A" },
            {0x8C, "ADC A,H: Add H and carry flag to A" },
            {0x8D, "ADC A,L: Add and carry flag L to A" },
            {0x8E, "ADC A,(HL): Add value pointed by HL and carry flag to A" },
            {0x8F, "ADC A,A: Add A and carry flag to A" },
            {0x90, "SUB A,B: Subtract B from A" },
            {0x91, "SUB A,C: Subtract C from A" },
            {0x92, "SUB A,D: Subtract D from A" },
            {0x93, "SUB A,E: Subtract E from A" },
            {0x94, "SUB A,H: Subtract H from A" },
            {0x95, "SUB A,L: Subtract L from A" },
            {0x96, "SUB A,(HL): Subtract value pointed by HL from A" },
            {0x97, "SUB A,A: Subtract A from A" },
            {0x98, "SBC A,B: Subtract B and carry flag from A" },
            {0x99, "SBC A,C: Subtract C and carry flag from A" },
            {0x9A, "SBC A,D: Subtract D and carry flag from A" },
            {0x9B, "SBC A,E: Subtract E and carry flag from A" },
            {0x9C, "SBC A,H: Subtract H and carry flag from A" },
            {0x9D, "SBC A,L: Subtract and carry flag L from A" },
            {0x9E, "SBC A,(HL): Subtract value pointed by HL and carry flag from A" },
            {0x9F, "SBC A,A: Subtract A and carry flag from A" },
            {0xA0, "AND B: Logical AND B against A" },
            {0xA1, "AND C: Logical AND C against A" },
            {0xA2, "AND D: Logical AND D against A" },
            {0xA3, "AND E: Logical AND E against A" },
            {0xA4, "AND H: Logical AND H against A" },
            {0xA5, "AND L: Logical AND L against A" },
            {0xA6, "AND (HL): Logical AND value pointed by HL against A" },
            {0xA7, "AND A: Logical AND A against A" },
            {0xA8, "XOR B: Logical XOR B against A" },
            {0xA9, "XOR C: Logical XOR C against A" },
            {0xAA, "XOR D: Logical XOR D against A" },
            {0xAB, "XOR E: Logical XOR E against A" },
            {0xAC, "XOR H: Logical XOR H against A" },
            {0xAD, "XOR L: Logical XOR L against A" },
            {0xAE, "XOR (HL): Logical XOR value pointed by HL against A" },
            {0xAF, "XOR A: Logical XOR A against A" },
            {0xB0, "OR B: Logical OR B against A" },
            {0xB1, "OR C: Logical OR C against A" },
            {0xB2, "OR D: Logical OR D against A" },
            {0xB3, "OR E: Logical OR E against A" },
            {0xB4, "OR H: Logical OR H against A" },
            {0xB5, "OR L: Logical OR L against A" },
            {0xB6, "OR (HL): Logical OR value pointed by HL against A" },
            {0xB7, "OR A: Logical OR A against A" },
            {0xB8, "CP B: Compare B against A" },
            {0xB9, "CP C: Compare C against A" },
            {0xBA, "CP D: Compare D against A" },
            {0xBB, "CP E: Compare E against A" },
            {0xBC, "CP H: Compare H against A" },
            {0xBD, "CP L: Compare L against A" },
            {0xBE, "CP (HL): Compare value pointed by HL against A" },
            {0xBF, "CP A: Compare A against A" },
            {0xC0, "RET NZ: Return if last result was not zero" },
            {0xC1, "POP BC: Pop 16-bit value from stack into BC" },
            {0xC2, "JP NZ,nn: Absolute jump to 16-bit location if last result was not zero" },
            {0xC3, "JP nn: Absolute jump to 16-bit location" },
            {0xC4, "CALL NZ,nn: Call routine at 16-bit location if last result was not zero" },
            {0xC5, "PUSH BC: Push 16-bit BC onto stack" },
            {0xC6, "ADD A,n: Add 8-bit immediate to A" },
            {0xC7, "RST 0: Call routine at address 0000h" },
            {0xC8, "RET Z: Return if last result was zero" },
            {0xC9, "RET: Return to calling routine" },
            {0xCA, "JP Z,nn: Absolute jump to 16-bit location if last result was zero" },
            {0xCB, "Ext ops: Extended operations (two-byte instruction code)" },
            {0xCC, "CALL Z,nn: Call routine at 16-bit location if last result was zero" },
            {0xCD, "CALL nn: Call routine at 16-bit location" },
            {0xCE, "ADC A,n: Add 8-bit immediate and carry to A" },
            {0xCF, "RST 8: Call routine at address 0008h" },
            {0xD0, "RET NC: Return if last result caused no carry" },
            {0xD1, "POP DE: Pop 16-bit value from stack into DE" },
            {0xD2, "JP NC,nn: Absolute jump to 16-bit location if last result caused no carry" },
            {0xD3, "XX: Operation removed in this CPU" },
            {0xD4, "CALL NC,nn: Call routine at 16-bit location if last result caused no carry" },
            {0xD5, "PUSH DE: Push 16-bit DE onto stack" },
            {0xD6, "SUB A,n: Subtract 8-bit immediate from A" },
            {0xD7, "RST 10: Call routine at address 0010h" },
            {0xD8, "RET C: Return if last result caused carry" },
            {0xD9, "RETI: Enable interrupts and return to calling routine" },
            {0xDA, "JP C,nn: Absolute jump to 16-bit location if last result caused carry" },
            {0xDB, "XX: Operation removed in this CPU" },
            {0xDC, "CALL C,nn: Call routine at 16-bit location if last result caused carry" },
            {0xDD, "XX: Operation removed in this CPU" },
            {0xDE, "SBC A,n: Subtract 8-bit immediate and carry from A" },
            {0xDF, "RST 18: Call routine at address 0018h" },
            {0xE0, "LDH (n),A: Save A at address pointed to by (FF00h + 8-bit immediate)" },
            {0xE1, "POP HL: Pop 16-bit value from stack into HL" },
            {0xE2, "LDH (C),A: Save A at address pointed to by (FF00h + C)" },
            {0xE3, "XX: Operation removed in this CPU" },
            {0xE4, "XX: Operation removed in this CPU" },
            {0xE5, "PUSH HL: Push 16-bit HL onto stack" },
            {0xE6, "AND n: Logical AND 8-bit immediate against A" },
            {0xE7, "RST 20: Call routine at address 0020h" },
            {0xE8, "ADD SP,d: Add signed 8-bit immediate to SP" },
            {0xE9, "JP (HL): Jump to 16-bit value pointed by HL" },
            {0xEA, "LD (nn),A: Save A at given 16-bit address" },
            {0xEB, "XX: Operation removed in this CPU" },
            {0xEC, "XX: Operation removed in this CPU" },
            {0xED, "XX: Operation removed in this CPU" },
            {0xEE, "XOR n: Logical XOR 8-bit immediate against A" },
            {0xEF, "RST 28: Call routine at address 0028h" },
            {0xF0, "LDH A,(n): Load A from address pointed to by (FF00h + 8-bit immediate)" },
            {0xF1, "POP AF: Pop 16-bit value from stack into AF" },
            {0xF2, "LDH A, (C): Operation removed in this CPU? (Or Load into A memory from FF00 + C?)" },
            {0xF3, "DI: DIsable interrupts" },
            {0xF4, "XX: Operation removed in this CPU" },
            {0xF5, "PUSH AF: Push 16-bit AF onto stack" },
            {0xF6, "OR n: Logical OR 8-bit immediate against A" },
            {0xF7, "RST 30: Call routine at address 0030h" },
            {0xF8, "LDHL SP,d: Add signed 8-bit immediate to SP and save result in HL" },
            {0xF9, "LD SP,HL: Copy HL to SP" },
            {0xFA, "LD A,(nn): Load A from given 16-bit address" },
            {0xFB, "EI: Enable interrupts" },
            {0xFC, "XX: Operation removed in this CPU" },
            {0xFD, "XX: Operation removed in this CPU" },
            {0xFE, "CP n: Compare 8-bit immediate against A" },
            {0xFF, "RST 38: Call routine at address 0038h" },
        };
    }
  }
}
